{"ast":null,"code":"var _jsxFileName = \"/frontend/src/authContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { Box } from \"@mui/system\";\nimport { LinearProgress } from \"@mui/material\";\nimport { Navigate } from \"react-router\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/React.createContext(); // The Auth Provider will provide the online status of\n// the user whenever we try to access a private route\n\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [lastVerificationTimestamp, updateVerificationTimestamp] = useState(new Date());\n  useEffect(() => {\n    axios({\n      method: \"post\",\n      url: \"http://localhost:8001/auth/verify\",\n      timeout: 2000,\n      retries: 3\n    }).then(res => {\n      setIsLoading(false);\n      setCurrentUser(res.data.username);\n    }).catch(err => {\n      setIsLoading(false);\n      console.log(err);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      currentUser,\n      isLoading,\n      setCurrentUser,\n      setIsLoading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}; // PrivateRoute encloses all protected pages which need authentication\n\n_s(AuthProvider, \"2yxrWvni81I8XEFrbybc0pCnhh0=\");\n\n_c = AuthProvider;\nexport const PrivateRoute = _ref2 => {\n  _s2();\n\n  let {\n    children\n  } = _ref2;\n  const {\n    currentUser,\n    isLoading\n  } = useContext(AuthContext);\n  console.log(children, currentUser, isLoading);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: \"100%\",\n        marginTop: \"0\"\n      },\n      children: /*#__PURE__*/_jsxDEV(LinearProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this);\n  }\n\n  return currentUser ? children : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/login\",\n    replace: \"true\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 35\n  }, this);\n};\n\n_s2(PrivateRoute, \"saC1lCn7LpyUOyViMl62L3sWyeA=\");\n\n_c2 = PrivateRoute;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AuthProvider\");\n$RefreshReg$(_c2, \"PrivateRoute\");","map":{"version":3,"sources":["/frontend/src/authContext.js"],"names":["axios","Box","LinearProgress","Navigate","React","useEffect","useState","useContext","AuthContext","createContext","AuthProvider","children","currentUser","setCurrentUser","isLoading","setIsLoading","lastVerificationTimestamp","updateVerificationTimestamp","Date","method","url","timeout","retries","then","res","data","username","catch","err","console","log","PrivateRoute","width","marginTop"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,aAApB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD;;AAEA,OAAO,MAAMC,WAAW,gBAAGJ,KAAK,CAACK,aAAN,EAApB,C,CAEP;AACA;;AACA,OAAO,MAAMC,YAAY,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC5C,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACU,yBAAD,EAA4BC,2BAA5B,IAA2DX,QAAQ,CAAC,IAAIY,IAAJ,EAAD,CAAzE;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACdL,IAAAA,KAAK,CAAC;AACJmB,MAAAA,MAAM,EAAE,MADJ;AAEJC,MAAAA,GAAG,EAAE,mCAFD;AAGJC,MAAAA,OAAO,EAAE,IAHL;AAIJC,MAAAA,OAAO,EAAE;AAJL,KAAD,CAAL,CAMGC,IANH,CAMSC,GAAD,IAAS;AACbT,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,MAAAA,cAAc,CAACW,GAAG,CAACC,IAAJ,CAASC,QAAV,CAAd;AACD,KATH,EAUGC,KAVH,CAUUC,GAAD,IAAS;AACdb,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAc,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KAbH;AAcD,GAfQ,EAeN,EAfM,CAAT;AAiBA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AAAEhB,MAAAA,WAAF;AAAeE,MAAAA,SAAf;AAA0BD,MAAAA,cAA1B;AAA0CE,MAAAA;AAA1C,KADT;AAAA,cAGGJ;AAHH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CA7BM,C,CA+BP;;GA/BaD,Y;;KAAAA,Y;AAgCb,OAAO,MAAMqB,YAAY,GAAG,SAAkB;AAAA;;AAAA,MAAjB;AAAEpB,IAAAA;AAAF,GAAiB;AAC5C,QAAM;AAAEC,IAAAA,WAAF;AAAeE,IAAAA;AAAf,MAA6BP,UAAU,CAACC,WAAD,CAA7C;AACAqB,EAAAA,OAAO,CAACC,GAAR,CAAYnB,QAAZ,EAAsBC,WAAtB,EAAmCE,SAAnC;;AAEA,MAAIA,SAAJ,EAAe;AACb,wBACE,QAAC,GAAD;AAAK,MAAA,EAAE,EAAE;AAAEkB,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,SAAS,EAAE;AAA5B,OAAT;AAAA,6BACE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAED,SAAOrB,WAAW,GAAGD,QAAH,gBAAc,QAAC,QAAD;AAAU,IAAA,EAAE,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAC;AAA9B;AAAA;AAAA;AAAA;AAAA,UAAhC;AACD,CAbM;;IAAMoB,Y;;MAAAA,Y","sourcesContent":["import axios from \"axios\";\nimport { Box } from \"@mui/system\";\nimport { LinearProgress } from \"@mui/material\";\nimport { Navigate } from \"react-router\";\nimport React, { useEffect, useState, useContext } from \"react\";\n\nexport const AuthContext = React.createContext();\n\n// The Auth Provider will provide the online status of\n// the user whenever we try to access a private route\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [lastVerificationTimestamp, updateVerificationTimestamp] = useState(new Date)\n\n  useEffect(() => {\n    axios({\n      method: \"post\",\n      url: \"http://localhost:8001/auth/verify\",\n      timeout: 2000,\n      retries: 3,\n    })\n      .then((res) => {\n        setIsLoading(false);\n        setCurrentUser(res.data.username);\n      })\n      .catch((err) => {\n        setIsLoading(false);\n        console.log(err);\n      });\n  }, []);\n\n  return (\n    <AuthContext.Provider\n      value={{ currentUser, isLoading, setCurrentUser, setIsLoading }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// PrivateRoute encloses all protected pages which need authentication\nexport const PrivateRoute = ({ children }) => {\n  const { currentUser, isLoading } = useContext(AuthContext);\n  console.log(children, currentUser, isLoading);\n\n  if (isLoading) {\n    return (\n      <Box sx={{ width: \"100%\", marginTop: \"0\" }}>\n        <LinearProgress />\n      </Box>\n    );\n  }\n\n  return currentUser ? children : <Navigate to=\"/login\" replace=\"true\" />;\n};\n"]},"metadata":{},"sourceType":"module"}