{"ast":null,"code":"var _jsxFileName = \"/frontend/src/features/editor/problemStatement.js\",\n    _s = $RefreshSig$();\n\nimport { Chip, Divider, Tab, Tabs } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ProblemStatement() {\n  _s();\n\n  const {\n    problem_id,\n    lab_id\n  } = useParams();\n  const [state, setState] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [tabState, setTabState] = useState(0);\n  useEffect(async () => {\n    const res = axios({\n      method: \"POST\",\n      url: \"http://localhost:1001/api/lab\",\n      data: {\n        type: \"problem/get\",\n        problem_id: problem_id,\n        lab_id: lab_id\n      }\n    });\n\n    if (res.data) {\n      setIsLoading(false);\n      setState(res.data);\n    } else {\n      console.log(\"Error fetching problem!\");\n    }\n  }); // if (isLoading) return <div>{/* Skeleton */}</div>;\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Tabs, {\n      children: /*#__PURE__*/_jsxDEV(Tab, {\n        label: \"Problem\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n  /*\n  return (\n    <div className=\"problem-statement\">\n      <div className=\"problem-name\">state.name</div>\n      <div className=\"problem-stats\">state.stats</div>\n      <div className=\"problem-setters\">\n        {state.problem_setter.map((setter) => {\n          return <Chip label={setter} className=\"problem-setter-chip\" />;\n        })}\n      </div>\n       <Box sx={{ borderBottom: 1, borderColor: \"divider\" }}>\n        <Tabs onChange={() => setTabState(1 - tabState)}>\n          <Tab label=\"Problem\" />\n          <Tab label=\"Solution\" />\n        </Tabs>\n      </Box>\n       <div className=\"problem-statement\">state.problem_statement</div>\n      <Divider />\n      <div className=\"problem-tests\">\n        {state.test_cases.map((test_case) => {\n          return (\n            <>\n              <div className=\"problem-test-no\">Test #</div>\n              <div className=\"problem-test-input\">{test_case.input}</div>\n              <div className=\"problem-test-output\">{test_case.output}</div>\n            </>\n          );\n        })}\n      </div>\n    </div>\n  );\n  */\n}\n\n_s(ProblemStatement, \"fHwK6M3SVB2wB9gDFyNiyaMEIlI=\", false, function () {\n  return [useParams];\n});\n\n_c = ProblemStatement;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProblemStatement\");","map":{"version":3,"sources":["/frontend/src/features/editor/problemStatement.js"],"names":["Chip","Divider","Tab","Tabs","Box","axios","React","useEffect","useState","useParams","ProblemStatement","problem_id","lab_id","state","setState","isLoading","setIsLoading","tabState","setTabState","res","method","url","data","type","console","log"],"mappings":";;;AAAA,SAASA,IAAT,EAAeC,OAAf,EAAwBC,GAAxB,EAA6BC,IAA7B,QAAyC,eAAzC;AACA,SAASC,GAAT,QAAoB,aAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,cAA1B;;;AAEA,eAAe,SAASC,gBAAT,GAA4B;AAAA;;AACzC,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAAyBH,SAAS,EAAxC;AAEA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,IAAD,CAA1C;AAEA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,CAAD,CAAxC;AAEAD,EAAAA,SAAS,CAAC,YAAY;AACpB,UAAMY,GAAG,GAAGd,KAAK,CAAC;AAChBe,MAAAA,MAAM,EAAE,MADQ;AAEhBC,MAAAA,GAAG,EAAE,+BAFW;AAGhBC,MAAAA,IAAI,EAAE;AACJC,QAAAA,IAAI,EAAE,aADF;AAEJZ,QAAAA,UAAU,EAAEA,UAFR;AAGJC,QAAAA,MAAM,EAAEA;AAHJ;AAHU,KAAD,CAAjB;;AASA,QAAIO,GAAG,CAACG,IAAR,EAAc;AACZN,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,MAAAA,QAAQ,CAACK,GAAG,CAACG,IAAL,CAAR;AACD,KAHD,MAGO;AACLE,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD;AACF,GAhBQ,CAAT,CARyC,CA0BzC;;AACA,sBACE;AAAA,2BACE,QAAC,IAAD;AAAA,6BACE,QAAC,GAAD;AAAK,QAAA,KAAK,EAAC;AAAX;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAOA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGC;;GApEuBf,gB;UACSD,S;;;KADTC,gB","sourcesContent":["import { Chip, Divider, Tab, Tabs } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\n\nexport default function ProblemStatement() {\n  const { problem_id, lab_id } = useParams();\n\n  const [state, setState] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const [tabState, setTabState] = useState(0);\n\n  useEffect(async () => {\n    const res = axios({\n      method: \"POST\",\n      url: \"http://localhost:1001/api/lab\",\n      data: {\n        type: \"problem/get\",\n        problem_id: problem_id,\n        lab_id: lab_id,\n      },\n    });\n    if (res.data) {\n      setIsLoading(false);\n      setState(res.data);\n    } else {\n      console.log(\"Error fetching problem!\");\n    }\n  });\n\n  // if (isLoading) return <div>{/* Skeleton */}</div>;\n  return (\n    <>\n      <Tabs>\n        <Tab label=\"Problem\" />\n      </Tabs>\n    </>\n  );\n  /*\n  return (\n    <div className=\"problem-statement\">\n      <div className=\"problem-name\">state.name</div>\n      <div className=\"problem-stats\">state.stats</div>\n      <div className=\"problem-setters\">\n        {state.problem_setter.map((setter) => {\n          return <Chip label={setter} className=\"problem-setter-chip\" />;\n        })}\n      </div>\n\n      <Box sx={{ borderBottom: 1, borderColor: \"divider\" }}>\n        <Tabs onChange={() => setTabState(1 - tabState)}>\n          <Tab label=\"Problem\" />\n          <Tab label=\"Solution\" />\n        </Tabs>\n      </Box>\n\n      <div className=\"problem-statement\">state.problem_statement</div>\n      <Divider />\n      <div className=\"problem-tests\">\n        {state.test_cases.map((test_case) => {\n          return (\n            <>\n              <div className=\"problem-test-no\">Test #</div>\n              <div className=\"problem-test-input\">{test_case.input}</div>\n              <div className=\"problem-test-output\">{test_case.output}</div>\n            </>\n          );\n        })}\n      </div>\n    </div>\n  );\n  */\n}\n"]},"metadata":{},"sourceType":"module"}