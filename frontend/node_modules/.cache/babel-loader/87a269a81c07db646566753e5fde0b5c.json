{"ast":null,"code":"var _jsxFileName = \"/frontend/src/authContext.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { Box } from \"@mui/system\";\nimport { LinearProgress } from \"@mui/material\";\nimport { Navigate } from \"react-router\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/React.createContext(); // The Auth Provider will provide the online status of\n// the user whenever we try to access a private route\n\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [lastVerificationTimestamp, updateVerificationTimestamp] = useState(new Date(0)); // if the verification with the server happened just 10 minutes ago\n  // then show the view otherwise verify the acess token with the server\n\n  useEffect(() => {\n    if (currentUser != null && Date.now().getTime() - lastVerificationTimestamp < 10 * 60 * 60 * 1000) {\n      return;\n    }\n\n    axios({\n      method: \"post\",\n      url: \"http://localhost:8001/auth/verify\",\n      timeout: 2000,\n      retries: 3\n    }).then(res => {\n      setIsLoading(false);\n      updateVerificationTimestamp(Date.now().getTime());\n      setCurrentUser(res.data.username);\n    }).catch(err => {\n      setIsLoading(false);\n      console.log(err);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      currentUser,\n      isLoading,\n      setCurrentUser,\n      setIsLoading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"c39rXURlb5PhnOOaOgPOkt5GLnI=\");\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/frontend/src/authContext.js"],"names":["axios","Box","LinearProgress","Navigate","React","useEffect","useState","useContext","AuthContext","createContext","AuthProvider","children","currentUser","setCurrentUser","isLoading","setIsLoading","lastVerificationTimestamp","updateVerificationTimestamp","Date","now","getTime","method","url","timeout","retries","then","res","data","username","catch","err","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,aAApB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD;;AAEA,OAAO,MAAMC,WAAW,gBAAGJ,KAAK,CAACK,aAAN,EAApB,C,CAEP;AACA;;AACA,OAAO,MAAMC,YAAY,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC5C,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACU,yBAAD,EAA4BC,2BAA5B,IAA2DX,QAAQ,CACvE,IAAIY,IAAJ,CAAS,CAAT,CADuE,CAAzE,CAH4C,CAO5C;AACA;;AACAb,EAAAA,SAAS,CAAC,MAAM;AACd,QACEO,WAAW,IAAI,IAAf,IACAM,IAAI,CAACC,GAAL,GAAWC,OAAX,KAAuBJ,yBAAvB,GAAmD,KAAK,EAAL,GAAU,EAAV,GAAe,IAFpE,EAGE;AACA;AACD;;AAEDhB,IAAAA,KAAK,CAAC;AACJqB,MAAAA,MAAM,EAAE,MADJ;AAEJC,MAAAA,GAAG,EAAE,mCAFD;AAGJC,MAAAA,OAAO,EAAE,IAHL;AAIJC,MAAAA,OAAO,EAAE;AAJL,KAAD,CAAL,CAMGC,IANH,CAMSC,GAAD,IAAS;AACbX,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,2BAA2B,CAACC,IAAI,CAACC,GAAL,GAAWC,OAAX,EAAD,CAA3B;AACAP,MAAAA,cAAc,CAACa,GAAG,CAACC,IAAJ,CAASC,QAAV,CAAd;AACD,KAVH,EAWGC,KAXH,CAWUC,GAAD,IAAS;AACdf,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAgB,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KAdH;AAeD,GAvBQ,EAuBN,EAvBM,CAAT;AAyBA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AAAElB,MAAAA,WAAF;AAAeE,MAAAA,SAAf;AAA0BD,MAAAA,cAA1B;AAA0CE,MAAAA;AAA1C,KADT;AAAA,cAGGJ;AAHH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAzCM;;GAAMD,Y;;KAAAA,Y","sourcesContent":["import axios from \"axios\";\nimport { Box } from \"@mui/system\";\nimport { LinearProgress } from \"@mui/material\";\nimport { Navigate } from \"react-router\";\nimport React, { useEffect, useState, useContext } from \"react\";\n\nexport const AuthContext = React.createContext();\n\n// The Auth Provider will provide the online status of\n// the user whenever we try to access a private route\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [lastVerificationTimestamp, updateVerificationTimestamp] = useState(\n    new Date(0)\n  );\n\n  // if the verification with the server happened just 10 minutes ago\n  // then show the view otherwise verify the acess token with the server\n  useEffect(() => {\n    if (\n      currentUser != null &&\n      Date.now().getTime() - lastVerificationTimestamp < 10 * 60 * 60 * 1000\n    ) {\n      return;\n    }\n\n    axios({\n      method: \"post\",\n      url: \"http://localhost:8001/auth/verify\",\n      timeout: 2000,\n      retries: 3,\n    })\n      .then((res) => {\n        setIsLoading(false);\n        updateVerificationTimestamp(Date.now().getTime());\n        setCurrentUser(res.data.username);\n      })\n      .catch((err) => {\n        setIsLoading(false);\n        console.log(err);\n      });\n  }, []);\n\n  return (\n    <AuthContext.Provider\n      value={{ currentUser, isLoading, setCurrentUser, setIsLoading }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}