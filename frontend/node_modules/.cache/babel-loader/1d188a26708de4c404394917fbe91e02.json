{"ast":null,"code":"var _jsxFileName = \"/frontend/src/authContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { Box } from \"@mui/system\";\nimport { LinearProgress } from \"@mui/material\";\nimport { Navigate } from \"react-router\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/React.createContext(); // The Auth Provider will provide the online status of\n// the user whenever we try to access a private route\n\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [currentUser, setCurrentUser] = useState(null); // if the verification with the server happened just 10 minutes ago\n  // then show the view otherwise verify the acess token with the server\n\n  useEffect(() => {\n    if (currentUser && Date.now() - lastVerificationTimestamp < 10 * 60 * 60 * 1000) {\n      return;\n    }\n\n    axios({\n      method: \"post\",\n      url: \"http://localhost:8001/auth/verify\",\n      timeout: 2000,\n      retries: 3\n    }).then(res => {\n      setIsLoading(false);\n      updateVerificationTimestamp(Date.now().getTime());\n      setCurrentUser(res.data.username);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      currentUser,\n      isLoading,\n      setCurrentUser,\n      setIsLoading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}; // PrivateRoute encloses all protected pages which need authentication\n\n_s(AuthProvider, \"Y5F2pQQk2LZA5WRO2+bvRm5iRuo=\");\n\n_c = AuthProvider;\nexport const PrivateRoute = _ref2 => {\n  _s2();\n\n  let {\n    children\n  } = _ref2;\n  const {\n    isLoading\n  } = useContext(AuthContext);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: \"100%\",\n        marginTop: \"0\"\n      },\n      children: /*#__PURE__*/_jsxDEV(LinearProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  } else return currentUser ? children : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/login\",\n    replace: \"true\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 37\n  }, this);\n};\n\n_s2(PrivateRoute, \"gkdbcd2DUeeydarxc2usMF2V7Cw=\");\n\n_c2 = PrivateRoute;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AuthProvider\");\n$RefreshReg$(_c2, \"PrivateRoute\");","map":{"version":3,"sources":["/frontend/src/authContext.js"],"names":["axios","Box","LinearProgress","Navigate","React","useEffect","useState","useContext","AuthContext","createContext","AuthProvider","children","currentUser","setCurrentUser","Date","now","lastVerificationTimestamp","method","url","timeout","retries","then","res","setIsLoading","updateVerificationTimestamp","getTime","data","username","catch","err","console","log","isLoading","PrivateRoute","width","marginTop"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,aAApB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD;;AAEA,OAAO,MAAMC,WAAW,gBAAGJ,KAAK,CAACK,aAAN,EAApB,C,CAEP;AACA;;AACA,OAAO,MAAMC,YAAY,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC5C,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,IAAD,CAA9C,CAD4C,CAG5C;AACA;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,QACEO,WAAW,IACXE,IAAI,CAACC,GAAL,KAAaC,yBAAb,GAAyC,KAAK,EAAL,GAAU,EAAV,GAAe,IAF1D,EAGE;AACA;AACD;;AAEDhB,IAAAA,KAAK,CAAC;AACJiB,MAAAA,MAAM,EAAE,MADJ;AAEJC,MAAAA,GAAG,EAAE,mCAFD;AAGJC,MAAAA,OAAO,EAAE,IAHL;AAIJC,MAAAA,OAAO,EAAE;AAJL,KAAD,CAAL,CAMGC,IANH,CAMSC,GAAD,IAAS;AACbC,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAC,MAAAA,2BAA2B,CAACV,IAAI,CAACC,GAAL,GAAWU,OAAX,EAAD,CAA3B;AACAZ,MAAAA,cAAc,CAACS,GAAG,CAACI,IAAJ,CAASC,QAAV,CAAd;AACD,KAVH,EAWGC,KAXH,CAWUC,GAAD,IAAS;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KAbH;AAcD,GAtBQ,EAsBN,EAtBM,CAAT;AAwBA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AAAEjB,MAAAA,WAAF;AAAeoB,MAAAA,SAAf;AAA0BnB,MAAAA,cAA1B;AAA0CU,MAAAA;AAA1C,KADT;AAAA,cAGGZ;AAHH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CApCM,C,CAsCP;;GAtCaD,Y;;KAAAA,Y;AAuCb,OAAO,MAAMuB,YAAY,GAAG,SAAkB;AAAA;;AAAA,MAAjB;AAAEtB,IAAAA;AAAF,GAAiB;AAC5C,QAAM;AAAEqB,IAAAA;AAAF,MAAgBzB,UAAU,CAACC,WAAD,CAAhC;;AAEA,MAAIwB,SAAJ,EAAe;AACb,wBACE,QAAC,GAAD;AAAK,MAAA,EAAE,EAAE;AAAEE,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,SAAS,EAAE;AAA5B,OAAT;AAAA,6BACE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD,GAND,MAOE,OAAOvB,WAAW,GAAGD,QAAH,gBAAc,QAAC,QAAD;AAAU,IAAA,EAAE,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAC;AAA9B;AAAA;AAAA;AAAA;AAAA,UAAhC;AACH,CAXM;;IAAMsB,Y;;MAAAA,Y","sourcesContent":["import axios from \"axios\";\nimport { Box } from \"@mui/system\";\nimport { LinearProgress } from \"@mui/material\";\nimport { Navigate } from \"react-router\";\nimport React, { useEffect, useState, useContext } from \"react\";\n\nexport const AuthContext = React.createContext();\n\n// The Auth Provider will provide the online status of\n// the user whenever we try to access a private route\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n\n  // if the verification with the server happened just 10 minutes ago\n  // then show the view otherwise verify the acess token with the server\n  useEffect(() => {\n    if (\n      currentUser &&\n      Date.now() - lastVerificationTimestamp < 10 * 60 * 60 * 1000\n    ) {\n      return;\n    }\n\n    axios({\n      method: \"post\",\n      url: \"http://localhost:8001/auth/verify\",\n      timeout: 2000,\n      retries: 3,\n    })\n      .then((res) => {\n        setIsLoading(false);\n        updateVerificationTimestamp(Date.now().getTime());\n        setCurrentUser(res.data.username);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, []);\n\n  return (\n    <AuthContext.Provider\n      value={{ currentUser, isLoading, setCurrentUser, setIsLoading }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// PrivateRoute encloses all protected pages which need authentication\nexport const PrivateRoute = ({ children }) => {\n  const { isLoading } = useContext(AuthContext);\n\n  if (isLoading) {\n    return (\n      <Box sx={{ width: \"100%\", marginTop: \"0\" }}>\n        <LinearProgress />\n      </Box>\n    );\n  } else\n    return currentUser ? children : <Navigate to=\"/login\" replace=\"true\" />;\n};\n"]},"metadata":{},"sourceType":"module"}