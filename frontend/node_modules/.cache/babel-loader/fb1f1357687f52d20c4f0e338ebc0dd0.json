{"ast":null,"code":"var _jsxFileName = \"/frontend/src/authContext.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = React.createContext();\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [currentUser, setCurrentUser] = useState(null);\n  const navigate = useNavigate(); // we'll set the username value if it's there in the localStorage\n\n  const localUsername = localStorage.getItem(\"username\");\n\n  if (localUsername) {\n    setCurrentUser(localUsername);\n  }\n\n  const [isLoading, setIsLoading] = useState(true); // we'll still verify if the use is still logged in at the\n  // backend or not\n\n  useEffect(() => {\n    updateOnline(localUsername, (err, _) => {\n      if (err) {\n        console.log(`UPDATE_ONLINE_ERR: ${err}`);\n        localStorage.removeItem(\"username\");\n        navigate(\"/login\", {\n          replace: true\n        });\n      } else {\n        setCurrentUser(localUsername);\n        setIsLoading(false);\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      currentUser,\n      isLoading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}; // updateOnline will be used to ensure the user\n// is online and to end the test when the time runs out\n\n_s(AuthProvider, \"ESBkMwFkEuEdufOzLd/HT3YFMhs=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AuthProvider;\nexport function updateOnline(username, callback_) {\n  axios({\n    method: \"post\",\n    url: \"http://auth_server/auth/update_online\",\n    data: {\n      username: username\n    },\n    timeout: 500\n  }).then(res => {\n    console.log(res);\n    callback_(null, res);\n  }).catch(err => {\n    callback_(err, null);\n  });\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/frontend/src/authContext.js"],"names":["axios","useEffect","useState","useNavigate","AuthContext","React","createContext","AuthProvider","children","currentUser","setCurrentUser","navigate","localUsername","localStorage","getItem","isLoading","setIsLoading","updateOnline","err","_","console","log","removeItem","replace","username","callback_","method","url","data","timeout","then","res","catch"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,cAA5B;;AAEA,MAAMC,WAAW,GAAGC,KAAK,CAACC,aAAN,EAApB;AAEA,OAAO,MAAMC,YAAY,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC5C,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAMS,QAAQ,GAAGR,WAAW,EAA5B,CAF4C,CAI5C;;AACA,QAAMS,aAAa,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAtB;;AACA,MAAIF,aAAJ,EAAmB;AACjBF,IAAAA,cAAc,CAACE,aAAD,CAAd;AACD;;AAED,QAAM,CAACG,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,IAAD,CAA1C,CAV4C,CAY5C;AACA;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,YAAY,CAACL,aAAD,EAAgB,CAACM,GAAD,EAAMC,CAAN,KAAY;AACtC,UAAID,GAAJ,EAAS;AACPE,QAAAA,OAAO,CAACC,GAAR,CAAa,sBAAqBH,GAAI,EAAtC;AACAL,QAAAA,YAAY,CAACS,UAAb,CAAwB,UAAxB;AACAX,QAAAA,QAAQ,CAAC,QAAD,EAAW;AAAEY,UAAAA,OAAO,EAAE;AAAX,SAAX,CAAR;AACD,OAJD,MAIO;AACLb,QAAAA,cAAc,CAACE,aAAD,CAAd;AACAI,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,KATW,CAAZ;AAUD,GAXQ,EAWN,EAXM,CAAT;AAaA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEP,MAAAA,WAAF;AAAeM,MAAAA;AAAf,KAA7B;AAAA,cACGP;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAhCM,C,CAkCP;AACA;;GAnCaD,Y;UAEMJ,W;;;KAFNI,Y;AAoCb,OAAO,SAASU,YAAT,CAAsBO,QAAtB,EAAgCC,SAAhC,EAA2C;AAChDzB,EAAAA,KAAK,CAAC;AACJ0B,IAAAA,MAAM,EAAE,MADJ;AAEJC,IAAAA,GAAG,EAAE,uCAFD;AAGJC,IAAAA,IAAI,EAAE;AACJJ,MAAAA,QAAQ,EAAEA;AADN,KAHF;AAMJK,IAAAA,OAAO,EAAE;AANL,GAAD,CAAL,CAQGC,IARH,CAQSC,GAAD,IAAS;AACbX,IAAAA,OAAO,CAACC,GAAR,CAAYU,GAAZ;AACAN,IAAAA,SAAS,CAAC,IAAD,EAAOM,GAAP,CAAT;AACD,GAXH,EAYGC,KAZH,CAYUd,GAAD,IAAS;AACdO,IAAAA,SAAS,CAACP,GAAD,EAAM,IAAN,CAAT;AACD,GAdH;AAeD","sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router\";\n\nconst AuthContext = React.createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const navigate = useNavigate();\n\n  // we'll set the username value if it's there in the localStorage\n  const localUsername = localStorage.getItem(\"username\");\n  if (localUsername) {\n    setCurrentUser(localUsername);\n  }\n\n  const [isLoading, setIsLoading] = useState(true);\n\n  // we'll still verify if the use is still logged in at the\n  // backend or not\n  useEffect(() => {\n    updateOnline(localUsername, (err, _) => {\n      if (err) {\n        console.log(`UPDATE_ONLINE_ERR: ${err}`);\n        localStorage.removeItem(\"username\");\n        navigate(\"/login\", { replace: true });\n      } else {\n        setCurrentUser(localUsername);\n        setIsLoading(false);\n      }\n    });\n  }, []);\n\n  return (\n    <AuthContext.Provider value={{ currentUser, isLoading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// updateOnline will be used to ensure the user\n// is online and to end the test when the time runs out\nexport function updateOnline(username, callback_) {\n  axios({\n    method: \"post\",\n    url: \"http://auth_server/auth/update_online\",\n    data: {\n      username: username,\n    },\n    timeout: 500,\n  })\n    .then((res) => {\n      console.log(res);\n      callback_(null, res);\n    })\n    .catch((err) => {\n      callback_(err, null);\n    });\n}\n"]},"metadata":{},"sourceType":"module"}